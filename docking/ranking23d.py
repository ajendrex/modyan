#!/usr/bin/python

import collections
import sys
import argparse
from csv import DictReader
import pybel

def processRanking(f,lowestRanking):
  try:
    rankingFile = open(f, "r")
  except IOError:
    print("Couldn't open " + f)
  reader = DictReader(rankingFile, delimiter='\t')

  ranking = collections.OrderedDict()

  basenames = reader.fieldnames[1:-1]
  for i in range(len(basenames)):
    basenames[i] = (basenames[i],basenames[i] + ".sdf")

  for row in reader:
    if row["Smiles"].startswith("RANKING "):
      r = int(row["Smiles"][8:-1])
      if r < lowestRanking:
        return (ranking,basenames)
      else:
        continue
    
    for basename,coordFile in basenames:
      if row[basename] != "-,-":
        moleculeName = row[basename][1:row[basename].rfind(",")]
        ranking[(moleculeName,basename)] = None

  return (ranking,basenames)

def main():
  commandLineParser = argparse.ArgumentParser(description="Docking Results Ranking to Three Dimensions: takes \
                                                           a table generated by DRranker.py and builds a file \
                                                           with the coordinates of the docked molecules")
  commandLineParser.add_argument("rankingFile", help="file generated by DRranker.py")
  commandLineParser.add_argument("outputFile", help="output filename")
  commandLineParser.add_argument("-r", "--lowest-ranking", dest="lowestRanking", default=1, type=int, help="Last ranking level to be processed. Default: 1")
  commandLineParser.add_argument("-f", "--output-format", dest="outputFormat", default="sdf", help="Format of the file to be written. It must be a openbabel supported output format. Deafult: sdf")
  options = commandLineParser.parse_args()

  (ranking,basenames) = processRanking(options.rankingFile, options.lowestRanking)

  for (basename,coordFile) in basenames:
    try:
      mols = pybel.readfile("sdf", coordFile)
    except:
      print("Can't open " + coordFile, file=sys.stderr)
      exit()
    
    for mol in mols:
      if (mol.title,basename) in ranking:
        ranking[(mol.title,basename)] = pybel.Molecule(pybel.ob.OBMol(mol.OBMol))
  
  out = pybel.Outputfile(filename=options.outputFile, format=options.outputFormat, overwrite=True)
  for (molname,basename) in list(ranking.keys()):
    mol = ranking[(molname,basename)]
    mol.title += "_" + basename
    out.write(mol)

  out.close()

main()
